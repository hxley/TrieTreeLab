import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import  java.util.Scanner;

public class Lab5 {
	
	static TrieNode trieNode;
	
	public static void main( String [] args ) throws IOException {
		Scanner scanner = new Scanner( System.in );
		String path1;
		String path2 = new File( " " ).getAbsolutePath() + File.separator + "commands.dms";
		String path3 = new File( " " ).getAbsolutePath() + File.separator + "commands1.dms";
		
		System.out.print( "Enter how 1 for commands.dms or 2 for commands1.dms : " );
		
		int choice = scanner.nextInt();
		System.out.println();
		
		if( choice == 1 ) {
			path1 = path2;
		}
		
		else {
			path1 = path3;
		}
		
		trieNode = new TrieNode( trieNode, null, null );
		try( BufferedReader br = new BufferedReader( new FileReader( path1 ) ) ) {
			String line;
			while( ( line = br.readLine() ) != null ) {
				callfunction( line.replaceAll( "\\s",  "" ) );
			}
		}
		
		catch ( IOException e ) {
			
		}
	}
	
	private static void callfunction( String line ) {
		if( line.contains( "insert" ) ) {
			line = line.replace( "insert",  "" );
			trieNode.insert( line );
		}
		
		//method that implements and calls a print function
		else if( line.contains( "print" ) ) {
			trieNode.print();
		}
		
		//method that implements and calls a print function
		else if( line.contains( "height" ) ) {
			trieNode.height();
		}
		
		//method that implements and calls a search function
		else if( line.contains( "search" ) ) {
			line = line.replace( "search", " " );
			trieNode.search( line );
		}
		
		//method that implements and calls a smallest function
		//that chooses between the nodes based on smallest value
		else if( line.contains( "smallest" ) ) {
			line = line.replace( "insert",  "");
			trieNode.smallest();
		}
		
		//method that implements and calls a largest function
		//that chooses between the nodes based on the largest value
		else if ( line.contains( "largest" )  )  {
			line = line.replace( "insert",  "" );
			trieNode.largest();
		}
		
		//method that calls and implements the size function
		else if( line.contains( "size" ) ) {
			line = line.replace( "insert",  "");
			trieNode.size();
		}
	}

}
